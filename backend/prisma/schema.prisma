generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PUBLIC_URL")
}

model User {
  id             String               @id @default(uuid())
  email          String               @unique
  createdAt      DateTime             @default(now())
  hashedPassword String
  updatedAt      DateTime             @default(now()) @updatedAt
  country        String?
  fullname       String?
  language       String?
  role           String
  timezone       String?
  files          File[]
  folders        Folder[]
  passwordTokens PasswordResetToken[]
  subscriptions  Subscription[]
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model File {
  id        String   @id @default(uuid())
  name      String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  createdBy String
  folderId  String?
  type      String
  user      User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  folder    Folder?  @relation(fields: [folderId], references: [id], onDelete: Cascade)
}

model Folder {
  id        String   @id @default(uuid())
  name      String
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  parentId  String?
  files     File[]
  user      User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  parent    Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children  Folder[] @relation("FolderHierarchy")
}

model Subscription {
  id                   String    @id @default(uuid())
  userId               String
  plan                 Plan
  status               String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now()) @updatedAt
  changeRequestedAt    DateTime?
  stripeSubscriptionId String
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Plan {
  free
  standard
  max
}
